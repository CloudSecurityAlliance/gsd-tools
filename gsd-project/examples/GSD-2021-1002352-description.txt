This vulnerability was not correctly fixed "in certain non-default configuration" and a new vulnerability and patch have been released, please see GSD-2021-1002353 (CVE-2021-45046). Apache Log4j2 <=2.14.1 JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default. 

In log4j 2.15.1 and later JNDI will be disabled by default: 

"Dealing with CVE-2021-44228 has shown the JNDI has significant security issues. While we have mitigated what we are aware of it would be safer for users to completely disable it by default, especially since the large majority are unlikely to be using it. Those who are will need to specify -Dlog4j2.enableJndi=true or the environment variable form of it to use any JNDI components." (https://issues.apache.org/jira/browse/LOG4J2-3208) 

In previous releases (>2.10) this behavior can be mitigated by setting system property "log4j2.formatMsgNoLookups" to "true" or by removing the JndiLookup class from the classpath (example: zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class). Java 8u121 (see https://www.oracle.com/java/technologies/javase/8u121-relnotes.html) protects against remote code execution by defaulting "com.sun.jndi.rmi.object.trustURLCodebase" and "com.sun.jndi.cosnaming.object.trustURLCodebase" to "false". 

Later versions of the Oracle Java JDK are not affected by the LDAP attack vector, but other vectors are available for exploitation: "JDK versions greater than 6u211, 7u201, 8u191, and 11.0.1 are not affected by the LDAP attack vector but please note this still leaves other attack vectors. In these versions com.sun.jndi.ldap.object.trustURLCodebase is set to "false" meaning JNDI cannot load remote code using LDAP." (https://www.lunasec.io/docs/blog/log4j-zero-day/) 

Also please note that log4j version 1.x is not affected by this specific vulnerability it does have a number of known serious security flaws and likely also contains Remote Code Execution vulnerabilities, upgrading it should be investigated. 

Hot patches: 

There are currently several projects providing hot patches that can modify a running system to remove the vulnerability and are OpenSource licensed allowing them to be easily audited: 

Log4jHotPatch 

This is a tool which injects a Java agent into a running JVM process. The agent will attempt to patch the lookup() method of all loaded org.apache.logging.log4j.core.lookup.JndiLookup instances to unconditionally return the string "Patched JndiLookup::lookup()". It is designed to address the CVE-2021-44228 remote code execution vulnerability in Log4j without restarting the Java process. The dynamic and static agents are known to run on JDK 8 & 11 on Linux whereas on JDK 17 only the static agent is working (see below)" (https://github.com/corretto/hotpatch-for-apache-log4j2) 

Logout4Shell 

"However, enabling these system property requires access to the vulnerable servers as well as a restart. The Cybereason research team has developed the following code that exploits the same vulnerability and the payload therein forces the logger to reconfigure itself with the vulnerable setting disabled - this effectively blocks any further attempt to exploit Log4Shell on this server." (https://github.com/Cybereason/Logout4Shell) 

Detection 

Please see the GSD reference links tagged with "DETECTION" for more information (there are to many to list here). 

TOP LINKS: 

Best list of vulnerable software: https://github.com/NCSC-NL/log4shell/tree/main/software

Best list of vulnerable services: https://github.com/YfryTchsGD/Log4jAttackSurface 

Best hotpatch:

https://github.com/corretto/hotpatch-for-apache-log4j2

Best detection:

grep: https://gist.github.com/Neo23x0/e4c8b03ff8cdf1fa63b7d15db6e3860b

jarhashes: https://github.com/mubix/CVE-2021-44228-Log4Shell-Hashes 

semgrep: https://github.com/returntocorp/semgrep-rules/pull/1650/commits/ecfc32623eec718d61ec83b9196574f333191008/

yara: https://github.com/timb-machine/log4j/

burpsuite: https://github.com/silentsignal/burp-log4shell 

Nmap NSE: https://github.com/Diverto/nse-log4shell

Scanners: 
https://github.com/alexbakker/log4shell-tools
https://github.com/fullhunt/log4j-scan
https://github.com/takito1812/log4j-detect

Exploitation: 

An exploit kit is available at https://github.com/pimps/JNDI-Exploit-Kit and it has also been reported that omitting the closing } can result in data from other requests being sent as some servers with log4j2 will apparently keep sending data until they find a closing }.
